# -*- coding: utf-8 -*-
"""6. Sales Forecasting.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HNhrM0-i1XiCNkIwP_WRSivRv7MKptry

# **Importing Libraries**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error
from math import sqrt

"""# **EDA**"""

df = pd.read_csv('/content/train-5.csv')
df.info()

df['date'] = pd.to_datetime(df['date'], format = "%Y-%m-%d")

df.head()

store_id = 7
item_id = 31
filtered_data = df[(df['store'] == store_id) & (df['item'] == item_id)]

plt.figure(figsize=(12,6))
plt.plot(filtered_data['date'], filtered_data['sales'], label=f'Store {store_id}, Item {item_id}', color='blue')

plt.title(f'Sales Trend for Store {store_id}, Item {item_id}')
plt.xlabel('Date')
plt.ylabel('Sales')

plt.xticks(rotation=45)
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()

plt.figure(figsize=(8,5))
plt.hist(filtered_data['sales'], bins=20, color='skyblue', edgecolor='black')

plt.title(f'Sales Distribution for Store {store_id}, Item {item_id}')
plt.xlabel('Sales')
plt.ylabel('Frequency')

plt.grid(True)
plt.tight_layout()
plt.show()

"""The **Sales Distribution** appears to be *Normally* distributed at around **40** sales value  with *moderate* spread across the board."""

df_monthly = filtered_data.resample('ME', on='date').sum()

df_monthly['sales'].plot()

"""Monthly sales over time suggests a **positive** trend with a distinct **seasonal pattern**. This implies *item 7* may be of seasonal nature with a growing demand. Further analysis is required.

# **Time Series Analysis**

## Dickey-Fuller Test
"""

result = adfuller(df_monthly['sales'])

adf_statistic = result[0]
adf_p_value = result[1]

print(f"ADF Statistic: {adf_statistic:.5f}")
print(f"P-value: {adf_p_value:.5f}")
if adf_p_value < 0.05:
    print("The time series is stationary (Reject the null hypothesis)")
else:
    print("The time series is non-stationary (Failed to reject the null hypothesis)")

"""## Auto-Correlation & Partial Auto-Correlation Test"""

plt.figure(figsize=(12, 6))

plt.subplot(121)
plot_acf(df_monthly['sales'].dropna(), lags=30, ax=plt.gca())
plt.title('ACF Plot')

plt.subplot(122)
plot_pacf(df_monthly['sales'].dropna(), lags=30, ax=plt.gca())
plt.title('PACF Plot')

plt.show()

"""* The **ACF** values *gradually decay*, suggesting a moving average component in the time series.

* The **PACF** plot shows significant spikes at multiple lag points with **no** clear cut-off

## Seasonal Decomposition Plotting
"""

result = seasonal_decompose(df_monthly['sales'], model='additive', period=12)
trend = result.trend
seasonal = result.seasonal
residual = result.resid

fig, axes = plt.subplots(1, 3, figsize=(20, 5)) # Create a figure and 3 subplots

axes[0].plot(trend)
axes[0].set_title('Trend')

axes[1].plot(seasonal)
axes[1].set_title('Seasonality')

axes[2].plot(residual)
axes[2].set_title('Residual')

plt.tight_layout()
plt.show()

"""* There is a clear **upward** trend, indicating that sales have been **increasing** over time. The rate of increase seems to be generally **steady**.

* There is evidence of a **cyclical** pattern. However, the degree of seasonal fluctuations seem to be relatively stable.

* The residual component appears to be relatively **random**, with **no** clear pattern.  There are a few **noticeable** spikes in the residuals, which might indicate *outliers/anomalies*.

## Outlier Handling
"""

threshold = 2 * residual.std()
outliers = residual[abs(residual) > threshold]

print("Outliers found at:")
print(outliers)

df_monthly['sales_clean'] = df_monthly['sales'].copy()
for idx in outliers.index:
    # Use pd.DateOffset to add/subtract time periods
    df_monthly['sales_clean'].loc[idx] = df_monthly['sales'].loc[idx - pd.DateOffset(days=1): idx + pd.DateOffset(days=1)].mean()

plt.plot(df_monthly['sales_clean'], label='Sales (Outliers Handled)')
plt.title('Sales with Outliers Handled')
plt.legend()
plt.show()

"""## Removing Trend & Seasonality

via **First-order Differencing**
"""

df_monthly['sales_clean'] = df_monthly['sales_clean'].diff().dropna()

df_monthly['sales_clean'][df_monthly['sales_clean'].isna()]

df_monthly['sales_clean'] = df_monthly['sales_clean'].fillna(df_monthly['sales_clean'].mean())

df_monthly['sales_clean'][df_monthly['sales_clean'].isna()]

df_monthly['sales_clean'] .plot()

"""The **first-order differencing** appears to have effectively removed the *trend* and *seasonal* components from the data.

### Time Series Analysis of **Stationary Data**
"""

adf_test = adfuller(df_monthly['sales_clean'])
print(f'ADF Statistic: {adf_test[0]}')
print(f'p-value: {adf_test[1]}')

# Interpretation
if adf_test[1] < 0.05:
    print("The data is stationary")
else:
    print("The data is non-stationary")

plt.figure(figsize=(12, 6))

plt.subplot(121)
plot_acf(df_monthly['sales_clean'].dropna(), lags=30, ax=plt.gca())
plt.title('ACF Plot')

plt.subplot(122)
plot_pacf(df_monthly['sales_clean'].dropna(), lags=30, ax=plt.gca())
plt.title('PACF Plot')

plt.show()

result = seasonal_decompose(df_monthly['sales_clean'], model='additive', period=12)
trend = result.trend
seasonal = result.seasonal
residual = result.resid
fig, axes = plt.subplots(1, 3, figsize=(20, 5))

# Plot on each subplot
axes[0].plot(trend)
axes[0].set_title('Trend')

axes[1].plot(seasonal)
axes[1].set_title('Seasonal')

axes[2].plot(residual)
axes[2].set_title('Residual')

plt.tight_layout()
plt.show()

"""# Train-Test Split"""

def train_test_split(time_series, test_size=0.2):
    n = len(time_series)
    train_size = int(n * (1 - test_size))
    train, test = time_series[:train_size], time_series[train_size:]
    return train, test

train, test = train_test_split(df_monthly['sales_clean'])

"""# **Time Series Modelling**

## **ARIMA** Model
"""

arima_order = (2, 1, 12) #Adjusted based on ACF/PACF plot
arima_model = ARIMA(train, order=arima_order)
arima_fit = arima_model.fit()

arima_forecast = arima_fit.forecast(steps=len(test))

"""## **SARIMAX** Model"""

sarimax_order = (2, 0, 1) #Adjusted based on ACF/PACF plot
seasonal_order = (1, 1, 1, 12)

sarimax_model = SARIMAX(train, order=sarimax_order, seasonal_order=seasonal_order)
sarimax_fit = sarimax_model.fit()

sarimax_forecast = sarimax_fit.forecast(steps=len(test))

"""# **Analysing Predictions**"""

results_df = pd.DataFrame({
    'Actual': test,
    'ARIMA Forecast': arima_forecast,
    'SARIMAX Forecast': sarimax_forecast
})

print(results_df.head())

"""## Comparing Residuals"""

results_df['ARIMA Residual'] = results_df['Actual'] - results_df['ARIMA Forecast']
results_df['SARIMAX Residual'] = results_df['Actual'] - results_df['SARIMAX Forecast']

# Plot residuals
plt.figure(figsize=(10, 6))

plt.plot(results_df.index, results_df['ARIMA Residual'], label='ARIMA Residual', color='red')
plt.plot(results_df.index, results_df['SARIMAX Residual'], label='SARIMAX Residual', color='orange')

plt.title('Residuals for ARIMA and SARIMAX Models')
plt.xlabel('Date')
plt.ylabel('Residuals')
plt.legend()
plt.show()

"""## **Visualizing Forecasts**"""

plt.figure(figsize=(12, 6))

# Plot the actual sales data
plt.plot(train.index, train, label='Train Data', color='navy')
plt.plot(test.index, test, label='Actual Test Data', color='slateblue')

plt.plot(test.index, arima_forecast, label='ARIMA Forecast', color='coral', linestyle= '--')

plt.plot(test.index, sarimax_forecast, label='SARIMAX Forecast', color='gold', linestyle = 'dashdot')

plt.title(f'Sales Forecasting for Item {item_id} from Store {store_id}')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.legend()
plt.show()